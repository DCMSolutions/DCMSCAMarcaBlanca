@page "/settings"
@using System.Text;
@inject NavigationManager navigationManager
@inject HttpClient http
@inject NotificationService not

<style>
    .image-container {
        display: none;
    }

    .loader {
        border: 10px solid #f3f3f3;
        border-radius: 50%;
        border-top: 8px solid blue;
        border-bottom: 8px solid blue;
        width: 80px;
        height: 80px;
        -webkit-animation: spin 2s linear infinite;
        animation: spin 2s linear infinite;
    }

    @@-webkit-keyframes spin {
        0% {
            -webkit-transform: rotate(0deg);
        }

        100% {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>


<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Configuración</li>
    </ol>
</nav>
@if (url == null)
{
    <center>
        <div class="loader"></div>
    </center>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-default">COM</span>
                </div>
                <input type="number" class="form-control col-6" aria-label="COM" aria-describedby="inputGroup-sizing-default" style="width:200px;" @bind-value=@serialPortNumber>
            </div>
        </div>
    </div>



    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="inputGroup-sizing-default">URL</span>
        </div>
        <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value=@url>
        <div class="input-group-append">
            <RadzenButton Click=@refresh Icon="refresh" ButtonStyle="ButtonStyle.Success" />
        </div>
    </div>
    <br />
    <br />
    <button class="btn btn-outline-success" @onclick="send">Aceptar</button>
}


@code {

    int serialPortNumber;
    string url;
    private HubConnection _hubConnection;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            url = await http.GetStringAsync("api/settings");
            serialPortNumber = await http.GetFromJsonAsync<int>("api/settings/com");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving settings: {ex}");
        }
        string baseUrl = navigationManager.BaseUri;
        string _hubUrl = baseUrl.TrimEnd('/') + "/notificationHub";

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();


        _hubConnection.On<string>("COMChanges", (string a) =>
        {
            Console.WriteLine(a);
        });

        await _hubConnection.StartAsync();
    }
    public async Task refresh()
    {
        url = "https://www.vicentelopez.gov.ar/mibarriogestion/deportesws/api/access?documentNumber=";
        await http.GetStringAsync($"api/settings?url={url}");
    }
    public async Task send()
    {
        if (_hubConnection.State == HubConnectionState.Connected)
        {
            int viejoCom = await http.GetFromJsonAsync<int>("api/settings/com");
            if (viejoCom != serialPortNumber)
            {
                var serialPort = $"COM{serialPortNumber}";
                await _hubConnection.SendAsync("COMChanges", serialPort);
            }

            await http.GetStringAsync($"api/settings?url={url}");
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Modificación exitosa.", Detail = "Se han guardado los cambios correctamente.", Duration = 4000 });

        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error de conexión", Detail = "La conexión no está activa.", Duration = 4000 });
        }
    }


    void ShowNotification(NotificationMessage message)
    {
        not.Notify(message);

    }
}